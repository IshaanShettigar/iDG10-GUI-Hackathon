To create a diagram minimap etc gave a look at the advanced Multiple Papers tutorial to learn how to use this functionality to create diagram minimaps and previews.

You can move the origin of the paper using paper.translate this is good for panning around the infinite space.

advanced users may create their own link definitions instead, by extending the basic joint.dia.Link class.

The joint.shapes.standard.Link shape used in our example has two selectors defined: line (the visible <path> SVGElement of the link), and wrapper (a wider, transparent <path> SVGElement under the line that makes it easier to interact with the link).

Link labels can have custom position, styling and markup.

-----INTERMEDIATE-------

Special attributes are useful when defining custom elements and links and link labels.

The main way to define the styling of diagram elements, links, and labels in JointJS is through attrs objects. If the attributes passed are standard SVG attributes, they are merely passed down to the individual SVGElements of the shape; then it is the job of the browser to apply them to the elements and render the shapes in the requested manner when asked to do so by JointJS View classes. However, if JointJS encounters one of its special attributes, it takes over with custom logic in order to offer advanced functionality; the results are then encoded back as standard SVG attributes.

We can position subelements on links relative to the position of the link. we can use this for the position of attribute attachments to links.


You can create complex interactions between the user and all the tools by using:
paper.showTools() - shows tools on all link and element views.
paper.hideTools() - hides tools on all link and element views.
paper.removeTools() - removes tools from all link and element views.

Working with link labels
JointJS offers a full suite of methods for working with link labels:

link.labels(labels) - sets the labels array of the link. If called without arguments, returns the labels array.
link.label(index, label) - sets the provided label at the given index. If called with index only, returns that label.
link.insertLabel(index, label) - inserts the provided label at the given index.
link.appendLabel(label) - shortcut function. Inserts the label at the end of the labels array.
link.removeLabel(index) - removes the label at index.




----REQUIREMENTS-----
1. Custom shapes: when modelling their shapes in SVG format go look at the special attributes section of the documentation
2. Add a + button the label automatically to indicate the addition of a label. (labels are automatically added at the top of a link or element)


We can make anything parameterized, we can create an option menu on the right hand side, when someone clicks an element, they can automatically edit its attributes like text,offset etc etc. MAYBE EVEN SIZE (changing it for custom sizing is difficult)


ensureLegibility: true to keep link alphabets viewable


Highlighters can be used to provide visual emphasis to an element; during user interactions for example.
https://resources.jointjs.com/docs/jointjs/v3.6/demo/highlighters/js/mask.js
